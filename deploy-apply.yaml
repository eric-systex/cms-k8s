---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cms
  namespace: cms
data:
  cms.conf: |
    {
    "_help": "There is no way to put comments in a JSON file; the",
    "_help": "fields starting with '_' are meant to be comments.",
    "_section": "System-wide configuration",
    "temp_dir": "/tmp",
    "_help": "Whether to have a backdoor (see doc for the risks).",
    "backdoor": false,
    "_help": "The user/group that CMS will be run as.",
    "cmsuser": "cmsuser",
    "_section": "AsyncLibrary",
    "core_services":
    {
        "LogService":        [["localhost", 29000]],
        "ResourceService":   [["localhost", 28000]],
        "ScoringService":    [["localhost", 28500]],
        "Checker":           [["localhost", 22000]],
        "EvaluationService": [["localhost", 25000]],
        "Worker":            [["worker-1", 26000],
                              ["worker-2", 26000],
                              ["worker-3", 26000]],
        "ContestWebServer":  [["localhost", 21000]],
        "AdminWebServer":    [["localhost", 21100]],
        "ProxyService":      [["localhost", 28600]],
        "PrintingService":   [["localhost", 25123]]
        },
    "other_services":
    {
        "TestFileCacher":    [["localhost", 27501]]
        },
    "_section": "Database",
    "_help": "Connection string for the database.",
    "database": "postgresql+psycopg2://cmsuser:cmsuser@db:5432/cmsdb",
    "_help": "Whether SQLAlchemy prints DB queries on stdout.",
    "database_debug": false,
    "_help": "Whether to use two-phase commit.",
    "twophase_commit": false,
    "_section": "Worker",
    "_help": "Don't delete the sandbox directory under /tmp/ when they",
    "_help": "are not needed anymore. Warning: this can easily eat GB",
    "_help": "of space very soon.",
    "keep_sandbox": false,
    "_section": "Sandbox",
    "_help": "Do not allow contestants' solutions to write files bigger",
    "_help": "than this size (expressed in KB; defaults to 1 GB).",
    "max_file_size": 1048576,
    "_section": "WebServers",
    "_help": "This key is used to encode information that can be seen",
    "_help": "by the user, namely cookies and auto-incremented",
    "_help": "numbers. It should be changed for each",
    "_help": "contest. Particularly, you should not use this example",
    "_help": "for other than testing. It must be a 16 bytes long",
    "_help": "hexadecimal number. You can easily create a key calling:",
    "_help": "python -c 'from cmscommon import crypto; print(crypto.get_hex_random_key())'",
    "secret_key":             "50f5445afec7dce006a1f1f53406191f",
    "_help": "Whether Tornado prints debug information on stdout.",
    "tornado_debug": false,
    "_section": "ContestWebServer",
    "_help": "Listening HTTP addresses and ports for the CWSs listed above",
    "_help": "in core_services. If you access them through a proxy (acting",
    "_help": "as a load balancer) running on the same host you could put",
    "_help": "127.0.0.1 here for additional security.",
    "contest_listen_address": [""],
    "contest_listen_port":    [8888],
    "_help": "Login cookie duration in seconds. The duration is refreshed",
    "_help": "on every manual request.",
    "cookie_duration": 10800,
    "_help": "If CWSs write submissions to disk before storing them in",
    "_help": "the DB, and where to save them. %s = DATA_DIR.",
    "submit_local_copy":      true,
    "submit_local_copy_path": "%s/submissions/",
    "_help": "The number of proxies that will be crossed before CWSs get",
    "_help": "the request. This is used to decide whether to assume that",
    "_help": "the real source IP address is the one listed in the request",
    "_help": "headers or not. For example, if you're using nginx as a load",
    "_help": "balancer, you will likely want to set this value to 1.",
    "num_proxies_used": 0,
    "_help": "Maximum size of a submission in bytes. If you use a proxy",
    "_help": "and set these sizes to large values remember to change",
    "_help": "client_max_body_size in nginx.conf too.",
    "max_submission_length": 100000,
    "max_input_length": 5000000,
    "_help": "STL documentation path in the system (exposed in CWS).",
    "stl_path": "/usr/share/cppreference/doc/html/",
    "_section": "AdminWebServer",
    "_help": "Listening HTTP address and port for the AWS. If you access",
    "_help": "it through a proxy running on the same host you could put",
    "_help": "127.0.0.1 here for additional security.",
    "admin_listen_address": "",
    "admin_listen_port":    8889,
    "_help": "Login cookie duration for admins in seconds.",
    "_help": "The duration is refreshed on every manual request.",
    "admin_cookie_duration": 36000,
    "_section": "ScoringService",
    "_help": "List of URLs (with embedded username and password) of the",
    "_help": "RWSs where the scores are to be sent. Don't include the",
    "_help": "load balancing proxy (if any), just the backends. If any",
    "_help": "of them uses HTTPS specify a file with the certificates",
    "_help": "you trust.",
    "rankings": ["http://usern4me:passw0rd@ranking:8890/"],
    "https_certfile": null,
    "_section": "PrintingService",
    "_help": "Maximum size of a print job in bytes.",
    "max_print_length": 10000000,
    "_help": "Printer name (can be found out using 'lpstat -p';",
    "_help": "if null, printing is disabled)",
    "printer": null,
    "_help": "Output paper size (probably A4 or Letter)",
    "paper_size": "A4",
    "_help": "Maximum number of pages a user can print per print job",
    "_help": "(excluding the title page). Text files are cropped to this",
    "_help": "length. Too long pdf files are rejected.",
    "max_pages_per_job": 10,
    "max_jobs_per_user": 10,
    "pdf_printing_allowed": false,
    "_help": "This is the end of this file."
    }
  cms.ranking.conf: |
    {
    "_help": "There is no way to put comments in a JSON file; the",
    "_help": "fields starting with '_' are meant to be comments.",
    "_help": "Listening address for RankingWebServer.",
    "bind_address": "",
    "_help": "Listening port for RankingWebServer.",
    "http_port": 8890,
    "_help": "Login information for adding and editing data.",
    "username":   "usern4me",
    "password":   "passw0rd",
    "_help": "This is the end of this file."
    }
---
apiVersion: v1
kind: Service
metadata:
  name: main
  namespace: cms
  labels:
    app: main
spec:
  ports:
  - protocol: TCP
    port: 8888
    name: http-8888
  - protocol: TCP
    port: 8889
    name: http-8889
  selector:
    app: main
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: main
  labels:
    app: main
  namespace: cms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: main
  template:
    metadata:
      labels:
        app: main
    spec:
      containers:
      - name: main
        image: eric7940/cms:2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8888
        - containerPort: 8889
        env:
          - name: CMS_INSTANCE_TYPE
            value: "MAIN"
          - name: CMS_CONTEST_ID
            value: "1"
        volumeMounts:
          - name: cms-config
            mountPath: /usr/local/etc/cms.conf
            subPath: cms.conf
      volumes:
        - name: cms-config
          configMap:
            name: cms
---
apiVersion: v1
kind: Service
metadata:
  name: ranking
  namespace: cms
  labels:
    app: ranking
spec:
  ports:
  - protocol: TCP
    port: 8890
    name: http-8890
  selector:
    app: ranking
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: ranking
  labels:
    app: ranking
  namespace: cms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ranking
  template:
    metadata:
      labels:
        app: ranking
    spec:
      containers:
      - name: ranking
        image: eric7940/cms:2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8890
        env:
          - name: CMS_INSTANCE_TYPE
            value: "RANKING"
        volumeMounts:
          - name: cms-config
            mountPath: /usr/local/etc/cms.ranking.conf
            subPath: cms.ranking.conf
      volumes:
        - name: cms-config
          configMap:
            name: cms
---
apiVersion: v1
kind: Service
metadata:
  name: worker-1
  namespace: cms
  labels:
    app: worker-1
spec:
  # define worker service as headless
  clusterIP: None
  ports:
  - protocol: TCP
    port: 26000
    name: http-26000
  selector:
    app: worker-1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-1
  labels:
    app: worker-1
  namespace: cms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker-1
  template:
    metadata:
      labels:
        app: worker-1
    spec:
      containers:
      - name: worker-1
        image: eric7940/cms:2
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        ports:
        - containerPort: 26000
        env:
          - name: CMS_INSTANCE_TYPE
            value: "WORKER"
          - name: CMS_SHARD_ID
            value: "0"
        volumeMounts:
          - name: cms-config
            mountPath: /usr/local/etc/cms.conf
            subPath: cms.conf
      volumes:
        - name: cms-config
          configMap:
            name: cms
---
apiVersion: v1
kind: Service
metadata:
  name: worker-2
  namespace: cms
  labels:
    app: worker-2
spec:
  # define worker service as headless
  clusterIP: None 
  ports:
  - protocol: TCP
    port: 26000
    name: http-26000
  selector:
    app: worker-2
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: worker-2
  labels:
    app: worker-2
  namespace: cms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker-2
  template:
    metadata:
      labels:
        app: worker-2
    spec:
      containers:
      - name: worker-2
        image: eric7940/cms:2
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        ports:
        - containerPort: 26000
        env:
          - name: CMS_INSTANCE_TYPE
            value: "WORKER"
          - name: CMS_SHARD_ID
            value: "1"
        volumeMounts:
          - name: cms-config
            mountPath: /usr/local/etc/cms.conf
            subPath: cms.conf
      volumes:
        - name: cms-config
          configMap:
            name: cms
---
apiVersion: v1
kind: Service
metadata:
  name: worker-3
  namespace: cms
  labels:
    app: worker-3
spec:
  # define worker service as headless
  clusterIP: None 
  ports:
  - protocol: TCP
    port: 26000
    name: http-26000
  selector:
    app: worker-3
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: worker-3
  labels:
    app: worker-3
  namespace: cms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker-3
  template:
    metadata:
      labels:
        app: worker-3
    spec:
      containers:
      - name: worker-3
        image: eric7940/cms:2
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        ports:
        - containerPort: 26000
        env:
          - name: CMS_INSTANCE_TYPE
            value: "WORKER"
          - name: CMS_SHARD_ID
            value: "2"
        volumeMounts:
          - name: cms-config
            mountPath: /usr/local/etc/cms.conf
            subPath: cms.conf
      volumes:
        - name: cms-config
          configMap:
            name: cms
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init
  namespace: cms
data:
  init.sh: |
    #!/bin/bash
    set -e
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    CREATE USER cmsuser WITH PASSWORD 'cmsuser';
    CREATE DATABASE cmsdb;
    GRANT ALL PRIVILEGES ON DATABASE cmsdb TO cmsuser;
    EOSQL
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: db
  namespace: cms
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: db
  namespace: cms
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: db
  namespace: cms 
spec:
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - image: postgres:9.6-alpine
          name: db
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "root"
          ports:
            - containerPort: 5432
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: db-persistent-storage
              mountPath: /var/lib/postgresql/data
            - name: db-init
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: db-persistent-storage
          persistentVolumeClaim:
            claimName: db
        - name: db-init
          configMap:
            name: db-init
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cms
  namespace: cms
spec:
  rules:
  - host: cms.lab.istio.xyz
    http:
      paths:
      - backend:
          serviceName: main
          servicePort: 8888
  - host: cms-admin.lab.istio.xyz
    http:
      paths:
      - backend:
          serviceName: main
          servicePort: 8889
  - host: cms-ranking.lab.istio.xyz
    http:
      paths:
      - backend:
          serviceName: ranking
          servicePort: 8890
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: allowprivilege-cms
spec:
  allowPrivilegeEscalation: true
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - "*"
